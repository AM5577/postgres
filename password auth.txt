 
Overview 
password-based authentication differs from how the Postgres users' passwords are stored on the Postgres server and how the password provided by a client is sent across the connection.
Types of Password Authentication in PostgreSQL
1) scram-sha-256
it uses SCRAM-SHA-256 for authentication.
It is a challenge-response scheme that prevents password sniffing on untrusted connections.
it stores passwords on the Postgres server in a cryptographically hashed form that's secure.
Pros: This is the most secure way.
Cons: It is not supported by older client libraries.

2) md5
it uses a  less secure challenge-response mechanism.
It prevents password sniffing.
it avoids storing passwords on the server in plain text.
Cons: 
Provides no protection if an attacker steals the password hash from the server.  
Not considered secure against attacks.

Note:if md5 is specified  in pg_hba.conf but the user's password on the server is encrypted for SCRAM,

Then SCRAM-based authentication will automatically be chosen instead.

3) password-based 
It sends the password in clear text and is therefore vulnerable to password “sniffing” attacks. 
it should always be avoided if possible.
 If the connection is protected by SSL encryption then the password can be used safely, though.
 (Though SSL certificate authentication might be a better choice if one is depending on using SSL).
Questionnaires
Where is the password for each database user is stored?
PostgreSQL database passwords are separate from operating system user passwords. The password for each database user is stored in the pg_authid system catalog.
\x
select * from pg_authid;
 CREATE ROLE foo WITH LOGIN PASSWORD 'secret', 
 \password.

 If no password has been set up for a user, the stored password is null and password authentication will always fail for that user.
postgres=# show password_encryption;
-[ RECORD 1 ]-------+--------------
password_encryption | scram-sha-256

 Note: This is controlled by the configuration parameter password_encryption at the time the password is set. 
If a password was encrypted using the scram-sha-256 the setting,
 then it can be used for the authentication methods scram-sha-256 and password (but password transmission will be in plain text in the latter case). 
 md5 will automatically use the scram-sha-256 the method in this case. 
If a password was encrypted using the md5 the setting, then it can be used only for the md5 and password authentication method specifications (again, with the password transmitted in plain text in the latter case).
How to upgrade to scram-sha-25 from md5?
●	Ensure all client libraries in use are new enough to support SCRAM, 
●	set password_encryption = 'scram-sha-256' in postgresql.conf, 
●	make all users set new passwords, and change the authentication method specifications in pg_hba.conf to scram-sha-256.
     
