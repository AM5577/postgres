Introduction to PostgreSQL log_statement

Its' related with error and reporting to  error alongwith warning and database queries in a logfile.


Default log_statement option in PostgreSQL configuration file is none which  means nothing will  be logged in  into the error file.

Options

NONE
DDL
MOD  
ALL


How does How log_statement work in PostgreSQL?
It's a useful parameter in PostgreSQL used for  log error in logfile , database warning message and SQL queries.

Log_statement have four options available in PostgreSQL as mentioned below.

None:
This option of log_statement is defined as doesnâ€™t log any query in error log file.
This is default configurations option of log_statement is available. This is also defined as turning off the log_statement parameter for postgresql.
DDL:
Log all query which are under category of the DDL statement.
E.g  create, alter and drop statement.
All:
This option is defined as log all the statement which was executed from user.
It is logging DDL, DML and all the query language in PostgreSQL.
Not advised
Mod:
This option in log_statement is defined as log DDL query as well as log the modifying statement like delete, update, truncate, insert, copy, execute and prepare.


Example #1
Log_statement having none options.

It will not log anything into error log.

psql script:

show log_statement;
create table course (course_no integer, name text, price numeric);
INSERT INTO course (course_no, name, price) VALUES
(1, 'postgres', 150),
(2, 'mysql', 160),
(3, 'mongodb', 170);

select * from course;
tail -10f postgresql-.log

Example #2
Log_statement using DDL options.

In below example we have used DDL options with log_statement parameter. It will log only DDL statement into error log.

Psql script:

alter system set log_statement = 'DDL';
show log_statement;
insert
delete
select
CREATE TABLE course (
course_no integer,
name text,
price numeric
);
INSERT INTO course (course_no, name, price) VALUES
(1, 'postgres', 150),
(2, 'mysql', 160),
(3, 'mongodb', 170);

select * from course;

delete * from course;


Example #3
Log_statement using ALL options.

In below example we have used ALL options with log_statement parameter. It will log all statement into error log.

Psql script:

alter system set log_statement = 'ALL';
show log_statement;

CREATE TABLE course (
course_no integer,
name text,
price numeric
);
select * from course;

INSERT INTO course (course_no, name, price) VALUES
(1, 'postgres', 150),
(2, 'mysql', 160),
(3, 'mongodb', 170);

tail -10f postgresql-Mon.log


Example #4
Log_statement using mod options.

In below example we have used mod options with log_statement parameter. It will log DDL and DML into error log.

Psql script::

alter system set log_statement = 'mod';
show log_statement;
explain select * from courses;
INSERT INTO course (course_no, name, price) VALUES
(1, 'postgres', 150),
(2, 'mysql', 160),
(3, 'mongodb', 170);

tail -10f postgresql-Mon.log
